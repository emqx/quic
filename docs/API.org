#+TITLE: QUICER API
#+OPTIONS: toc:2
#+OPTIONS: ^:nil

*quicer* is the interface module, all API calls should be done through it.

* Terminology
| Term       | Definition                                                       |
|------------+------------------------------------------------------------------|
| server     | listen and accept quic connections from clients                  |
| client     | initiates quic connection                                        |
| listener   | Erlang Process owns listening port                               |
| connection | Quic Connection                                                  |
| stream     | Exchanging app data over a connection                            |
| owner      | 'owner' is a process that receives quic events.                  |
|            | 'connection owner' receive events of a connection                |
|            | 'stream owner' receive application data and events from a stream |
|            | 'listener owner' receive events from listener                    |
|            | When owner is dead, related resources would be released          |
| l_ctx      | listener nif context                                             |
| c_ctx      | connection nif context                                           |
| s_ctx      | stream nif context                                               |


* Types used

see [[../include/quicer_types.hrl][quicer_types.hrl]]

* NIF Loading API
** open library

Quicer library must be opened before any use.

#+begin_src erlang
-spec open_lib() ->
        {ok, true}  | %% opened
        {ok, false} | %% already opened
        {ok, debug} | %% opened with lttng debug library loaded (if present)
        {error, open_failed, atom_reason()}.
#+end_src

** close library

#+begin_src erlang

-spec quicer:close_lib() -> ok.

#+end_src

* Registraion

Registraion should be opened before calling traffic APIs.

Registraion creates application context.

Currently only support one application.

** Open Registraion
#+begin_src erlang

-spec reg_open() -> ok.

#+end_src

** Close Registraion

#+begin_src erlang

-spec reg_close() -> ok.

#+end_src


* Listener API (Server)
** Start listener

Start listen on =Port= or "HOST:PORT"

listener_handler() is used for accepting new connection.

#+begin_src erlang
-spec listen(listen_on(), listen_opts()) ->
        {ok, listener_handler()} |
        {error, listener_open_error,  atom_reason()} |
        {error, listener_start_error, atom_reason()}.
#+end_src

notes,

1. Port binding is done in NIF context, thus you cannot see it from `inet:i()`.
1. ListenOn can either be integer() for Port or be String for HOST:PORT
1. There is no address binding even HOST is specified.

** Stop listener

#+begin_src erlang
-spec close_listener(listener_handler()) -> ok.
#+end_src

* Connection API
** Accept New Connection (Server)

Accept new connection from listener_handler().

Calling Process becomes the owner of the connection.

#+begin_src erlang

%% accept connection with infinit timeout.
-spec accept(listener_handler(), acceptor_opts()) ->
          {ok, connection_handler()} |
          {error, badarg | param_error | not_enough_mem | badpid}.

%% accept connection with timeout specified.
-spec accept(listener_handler(), acceptor_opts(), timer:timeout()) ->
          {ok, connection_handler()} |
          {error, badarg | param_error | not_enough_mem | badpid} |
          {error, timeout}.
#+end_src

*** Async Various
#+begin_src erlang
-spec async_accept(listener_handler(), acceptor_opts()) ->
        {ok, listener_handler()} |
        {error, badarg | param_error | not_enough_mem | badpid}.
#+end_src

** TLS Handshake (Server)

Complete TLS handshake after accepted a Connection.

#+begin_src erlang

%% Continue TLS handshake
-spec handshake(connection_handler(), timer:timeout()) ->
          ok |
          {error, badarg} |
          {error, atom_reason()}.

%% Same as above with 1s timeout
-spec handshake(connection_handler()) ->
          ok |
          {error, badarg} |
          {error, atom_reason()} |
          {error, timeout}.
#+end_src


*** Async Various
#+begin_src erlang
-spec async_handshake(connection_handler()) ->
        ok | {error, badarg | atom_reason()}.
#+end_src


** Initial New Connection (Client)

Initial new connection to remote endpoint with connection opts specified.

#+begin_src erlang
-spec connect(inet:hostname() | inet:ip_address(),
              inet:port_number(), conn_opts(), timeout()) ->
          {ok, connection_handler()} |
          {error, conn_open_error | config_error | conn_start_error} |
          {error, transport_shutdown} |
          {error, timeout}.
#+end_src

*** Async Various
#+begin_src erlang
-spec async_connect(hostname(), inet:port_number(), conn_opts()) ->
        {ok, connection_handler()} |
        {error, conn_open_error | config_error | conn_start_error}.
#+end_src

** Close Connection

Close connection with flag specified and application reason code.

#+begin_src erlang
%% Close connection with flags and application error code and timeout
-spec close_connection(connection_handler(),
                       conn_close_flag(),
                       app_errno(),
                       timer:timeout().
                      ) -> ok.

%% Same as above with 5s timeout.
-spec close_connection(connection_handler(),
                       conn_close_flag(),
                       app_errno()
                      ) -> ok.

%% Same as above but close with flag: QUIC_CONNECTION_SHUTDOWN_FLAG_NONE and application error code 0
-spec close_connection(connection_handler(), timer:timeout()) -> ok.

#+end_src


*** Async various
#+begin_src erlang
-spec async_close_connection(connection_handler(),
                             conn_close_flag(),
                             app_errno()) -> ok.
#+end_src

* Stream API
** Start Stream (CLient)

Start new stream in connection, return new stream handler.

Calling process becomes the owner of the stream.

#+begin_src erlang
-spec start_stream(connection_handler(), stream_opts()) ->
        {ok, stream_handler()} |
        {error, badarg | internal_error | bad_pid | owner_dead} |
        {error, stream_open_error, atom_reason()} |
        {error, stream_start_error, atom_reason()}.
#+end_src

** Accept Stream (Server)

Accept new stream on a existing connection.

Calling process become the owner of the new stream and it get monitored by NIF.

Once the Calling process is dead, closing stream will be triggered.

#+begin_src erlang
-spec accept_stream(connection_handler(), stream_opts(), timeout()) ->
        {ok, stream_handler()} |
        {error, badarg | internal_error | bad_pid | owner_dead} |
        {erro, timeout}.

%% Same as above with infinite timeout.
-spec accept_stream(connection_handler(), stream_opts()) ->
        {ok, stream_handler()} |
        {error, badarg | internal_error | bad_pid | owner_dead}.
#+end_src

*** Async Various
#+begin_src erlang

-spec async_accept_stream(connection_handler(), stream_opts()) ->
        {ok, connection_handler()} |
        {error, badarg | internal_error | bad_pid | owner_dead}.

#+end_src

note, it returns
#+begin_src erlang
{ok, connection_handler()}.
%%  NOT
{ok, stream_handler()}.
#+end_src

Stream handler will be delivered to the owner in erlang msg.

** Send Data

Send binary data over stream, blocking until send request is handled by the transport worker.

#+begin_src erlang
-spec send(stream_handler(), binary(), send_flags()) ->
        {ok, BytesSent :: pos_integer()}          |
        {error, badarg | not_enough_mem | closed} |
        {error, stream_send_error, atom_reason()}.
#+end_src

*** Async Various

Non-blocking send

#+begin_src erlang
-spec async_send(stream_handler(), binary()) ->
        {ok, BytesSent :: pos_integer()}          |
        {error, badarg | not_enough_mem | closed} |
        {error, stream_send_error, atom_reason()}.
#+end_src

** Recv Data (Passive mode)

Passive recv data from stream.

If Len = 0, return all data in recv buffer if it is not empty.
            if buffer is empty, blocking for a Quic msg from stack to arrive and return all data in that msg.

If Len > 0, desired bytes will be returned, other data would be left in recv buffer.

Suggested to use Len=0 if caller want to buffer or reassemble the data on its own.

note, the requested Len cannot exceeed the stream recv window size specified in connection opts
otherwise {error, stream_recv_window_too_small} will be returned.

#+begin_src erlang
-spec recv(stream_handler(), Count::non_neg_integer())
          -> {ok, binary()} | {error, any()}.
#+end_src

note,
recv large data set would cause lots of context switchings between erlang schedulers and NIF context.

** Recv Data (Active Receive)

See ...

** Close Stream

#+begin_src erlang

%% Close Stream with flags and application specified error code.
%% returns when stream closing is confirmed in the stack.
%% Flags could be used to control the behavior like half-close.
%% see stream_close_flags() for more
-spec close_stream(stream_handler(),
                   stream_close_flags(),
                   app_errno(),
                   time:timeout()) ->
        ok |
        {error, badarg | atom_reason()}.
        {error, timeout}.

%% Close stream gracefully, with app_errno 0
%% returns when both endpoints closed the stream
-spec close_stream(stream_handler(), timer:timeout()) ->
        ok |
        {error, badarg | atom_reason()} |
        {error, timeout}.

%% Close_stream gracefully with infinite timeout
-spec close_stream(stream_handler()) ->
          ok |
        {error, badarg | atom_reason()} |
#+end_src
*** Async Various
#+begin_src erlang
-spec async_close_stream(stream_handler(),
                         stream_close_flags(),
                         app_errno())
                        -> ok | {error, badarg | atom_reason()}.

%% Same as above but with graceful flags
-spec async_close_stream(stream_handler()) ->
        ok |
        {error, badarg | atom_reason()}.
#+end_src

** Get Stream ID

Get Quic Stream ID in the connection.

#+begin_src erlang
-spec get_stream_id(Stream::stream_handler()) ->
        {ok, integer()} |
        {error, badarg | internal_error | not_enough_mem} |
        {error, atom_reason()}.
#+end_src

* Other General APIs

** sockname

Returns the local address and port number for a socket.

#+begin_src erlang
-spec sockname(listener_handler() | connection_handler() | stream_handler()) ->
        {ok, {inet:ip_address(), inet:port_number()}} | {error, any()}.
#+end_src

** getopt

Get one option for a connecton/stream/listener

#+begin_src erlang
-spec getopt(handler(), optname(), optlevel()) ->
        not_found | %% `optname' not found, or wrong `optlevel' must be a bug.
        {ok, conn_settings()}   | %% when optname = param_conn_settings
        {error, badarg | param_error | internal_error | not_enough_mem} |
        {error, atom_reason()}.
#+end_src

** setopt

Set one option for connection/stream/listener

#+begin_src erlang
-spec setopt(handler(), optname(), any()) ->
        ok |
        {error, badarg | param_error | internal_error | not_enough_mem} |
        {error, atom_reason()}.
#+end_src

** getstat

Gets one or more statistic options for a connection.

#+begin_src erlang
-spec getstat(connection_handler(), [inet:stat_option()]) ->
        {ok, list()} |
        {error, badarg | param_error | internal_error | not_enough_mem} |
        {error, atom_reason()}.
#+end_src

** peername

Returns the address and port for the other end of a connection.

#+begin_src erlang
-spec peername(connection_handler()  | stream_handler()) ->
        {ok, {inet:ip_address(), inet:port_number()}} | {error, any()}.
#+end_src

** listeners

Return listeners name, listener on and its pid.
#+begin_src erlang
-spec listeners() -> [{{ listener_name(), listen_on()}, pid()}].
#+end_src

** controlling_process

Change the owner process of connection/stream

#+begin_src erlang
-spec controlling_process(connection_handler() | stream_handler(), pid()) ->
        ok |
        {error, badarg | owner_dead | not_owner}.
#+end_src


* Erlang Messges

Since most of API calls are asynchronous, the API caller or the stream/connection owner can receive
async messages as following

** Messages to Stream Owner

*** active received data

Data received in binary format

#+begin_src erlang
{quic, binary(), stream_handler(), AbsoluteOffset::integer(), TotalBufferLength::integer(), Flag :: integer()}
#+end_src

*** peer_send_shutdown

#+begin_src erlang
{quic, peer_send_shutdown, stream_handler(), ErrorCode}
#+end_src

*** peer_send_aborted

#+begin_src erlang
{quic, peer_send_aborted, stream_handler(), ErrorCode}
#+end_src

*** stream closed, shutdown_completed,

Both directions of the stream have been shut down.

#+begin_src erlang
{quic, closed, stream_handler(), IsGraceFul:: 0 | 1}
#+end_src

*** send_complete

Send call is handled by stack, caller is ok to release the sndbuffer

This message is for sync send only.

#+begin_src erlang
{quic, send_complete, stream_handler(), IsSendCanceled :: 0 | 1}
#+end_src


*** continue recv

This is for passive recv only, this is used to notify
caller that new data is ready in recv buffer. The data in the recv buffer
will be pulled by NIF function instead of by sending the erlang messages

see usage in: quicer:recv/2

#+begin_src erlang
{quic, continue, stream_handler()}
#+end_src

*** passive mode

Running out of *active_n*, stream now is in passive mode.

Need to call setopt active_n to make it back to passive mode again

Or use quicer:recv/2 to receive in passive mode

#+begin_src erlang
{quic, passive, stream_handler()}
#+end_src

** Messages to Connection Owner

*** Connection connected

#+begin_src erlang
{quic, connected, connection_handler()}
#+end_src

This message notifies the connection owner that quic connection is established(TLS handshake is done).

also see [[Accept New Connection (Server)]]


*** New Stream Started

#+begin_src erlang
{quic, new_stream, stream_handler()} %% @TODO, it should carry connection_handler() as well
#+end_src

This message is sent to notify the process which is accpeting new stream.

The process become the owner of the stream.

also see [[Accept Stream (Server)]]

*** Transport Shutdown

Connection has been shutdown by the transport locally, such as idle timeout.

#+begin_src erlang
{quic, trans_shutdown, connection_handler(), Status :: atom_status()}
#+end_src

*** Shutdown initiated by PEER

Peer side initiated connection shutdown.

#+begin_src erlang
{quic, shutdown, connection_handler()}
#+end_src

*** Shutdown Complete

The connection has completed the shutdown process and is ready to be
safely cleaned up.

#+begin_src erlang
{quic, closed, connection_handler()}
#+end_src

** Messages to Listener Owner

*** New connection

#+begin_src erlang
{quic, new_conn, connection_handler()}
#+end_src

This message is sent to the process who is accepting new connections.

The process becomes the connection owner.

To complete the TLS handshake, quicer:handshake/1,2 should be called.

also see
  [[TLS Handshake (Server)]]

* TODO Upgrade
