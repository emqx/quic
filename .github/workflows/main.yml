name: ci
on: [push, pull_request]

jobs:
  mac:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-12-arm64
          - macos-12
          - macos-11
        otp:
          - 25.1.2-2
          - 24.3.4.2-2

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Configure Homebrew cache
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/Homebrew/
            ~/Library/Caches/Homebrew/downloads/
          key: brew-${{ matrix.os }}-${{ matrix.otp  }}
      - uses: emqx/setup-otp@v1.0.0
        with:
          os: ${{ matrix.os }}
          otp: ${{ matrix.otp }}
      - name: release build
        run: |
          erl -eval 'erlang:display(erlang:system_info(system_version)),halt()'
          ulimit -c unlimited
          make build-nif
          make ci
      - name: Archive CT Logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: mac-ct-logs
          path: _build/test/logs
          retention-days: 1


  linux:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        otp:
          - 24.3.4
          - 25.1.2
        rebar3:
          - 3.20.0
        build_type:
          - RelWithDebInfo
          - Debug
        logging:
          - true
          - false
        arch:
          - x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.otp }}
          rebar3-version: ${{ matrix.rebar3 }}
      - name: release build with debug log off
        run: |
          echo "github ref: ${{ github.event.ref }}"
          echo "github ref: ${{ github.ref }}"
          sudo sysctl -w kernel.core_pattern=core
          ulimit -c unlimited
          export CMAKE_BUILD_TYPE=${{ matrix.build_type }}

          if ${{ matrix.logging }}"" == "true" ; then
            export QUIC_ENABLE_LOGGING=ON

            sudo apt-add-repository ppa:lttng/stable-2.13
            sudo apt-get update
            sudo apt-get install -y lttng-tools  babeltrace liblttng-ust-dev lttng-modules-dkms-
            which lttng
            uname -a
            mkdir msquic_lttng
            lttng create msquic -o=./msquic_lttng
            lttng enable-event --userspace CLOG_*
            lttng add-context --userspace --type=vpid --type=vtid
            lttng start

            cleanup () {
              lttng stop msquic;
              babeltrace --names all ./msquic_lttng/* > _build/test/quic.babel.txt
            }
            trap "cleanup"  EXIT
          fi

          make ci

      - name: gdb bt
        if: failure()
        run: |
          which gdb || sudo apt install gdb
          corefile=$(find _build/test -name core)
          if [ -n $corefile ]; then
            gdb -ex bt $(erl -noshell -eval 'io:format(code:root_dir()),halt()')/erts-*/bin/beam.smp "${corefile}"
          else
            echo "No coredump found"
          fi

      - name: Archive CT Logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: linux-ct-logs
          path: _build/test/
          retention-days: 1

      - name: build rel tar file
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          make tar
          mv _build/default/rel/quicer/quicer-*.tar.gz quicer.tar.gz
